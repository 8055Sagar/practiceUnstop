{"ast":null,"code":"var _jsxFileName = \"/home/com154/reactPracticeProject/unstop/src/assessment/skillsFormChip/formChip.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport Select, { components } from 'react-select';\nimport './formChip.scss'; // Import the CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FormChip = () => {\n  _s();\n  const [selectedOptions, setSelectedOptions] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const options = [{\n    value: 'option1',\n    label: 'Option 1'\n  }, {\n    value: 'option2',\n    label: 'Option 2'\n  }, {\n    value: 'option3',\n    label: 'Option 3'\n  }\n  // Add more options as needed\n  ];\n\n  const handleChange = selected => {\n    setSelectedOptions(selected);\n  };\n  const handleInputChange = inputValue => {\n    setInputValue(inputValue);\n  };\n  const handleRemoveOption = optionValue => {\n    setSelectedOptions(prevSelected => prevSelected.filter(option => option.value !== optionValue));\n  };\n\n  // Custom rendering for the selected option in the Select dropdown\n  const SingleValue = ({\n    children,\n    ...props\n  }) => {\n    return /*#__PURE__*/_jsxDEV(components.SingleValue, {\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 12\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"selected-options-container\",\n      children: selectedOptions.map(option => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"selected-option\",\n        children: [option.label, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleRemoveOption(option.value),\n          className: \"remove-button\",\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this)]\n      }, option.value, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Select, {\n      options: options,\n      value: selectedOptions,\n      onChange: handleChange,\n      onInputChange: handleInputChange,\n      isMulti: true,\n      isClearable: true,\n      components: {\n        SingleValue: SingleValue\n      },\n      hideSelectedOptions: true,\n      formatOptionLabel: ({\n        label\n      }) => label,\n      styles: {\n        // Hide the \"cross\" icon from the select input field\n        clearIndicator: base => ({\n          ...base,\n          display: 'none'\n        })\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(FormChip, \"dvQBumXer0RFC5AoRrZG8P3zCPk=\");\n_c = FormChip;\nexport default FormChip;\nvar _c;\n$RefreshReg$(_c, \"FormChip\");","map":{"version":3,"names":["useState","Select","components","jsxDEV","_jsxDEV","FormChip","_s","selectedOptions","setSelectedOptions","inputValue","setInputValue","options","value","label","handleChange","selected","handleInputChange","handleRemoveOption","optionValue","prevSelected","filter","option","SingleValue","children","props","fileName","_jsxFileName","lineNumber","columnNumber","className","map","onClick","onChange","onInputChange","isMulti","isClearable","hideSelectedOptions","formatOptionLabel","styles","clearIndicator","base","display","_c","$RefreshReg$"],"sources":["/home/com154/reactPracticeProject/unstop/src/assessment/skillsFormChip/formChip.js"],"sourcesContent":["import { useState } from 'react';\nimport Select, { components } from 'react-select';\nimport './formChip.scss'; // Import the CSS file\n\nconst FormChip = () => {\n  const [selectedOptions, setSelectedOptions] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n\n  const options = [\n    { value: 'option1', label: 'Option 1' },\n    { value: 'option2', label: 'Option 2' },\n    { value: 'option3', label: 'Option 3' },\n    // Add more options as needed\n  ];\n\n  const handleChange = (selected) => {\n    setSelectedOptions(selected);\n  };\n\n  const handleInputChange = (inputValue) => {\n    setInputValue(inputValue);\n  };\n\n  const handleRemoveOption = (optionValue) => {\n    setSelectedOptions((prevSelected) =>\n      prevSelected.filter((option) => option.value !== optionValue)\n    );\n  };\n\n  // Custom rendering for the selected option in the Select dropdown\n  const SingleValue = ({ children, ...props }) => {\n    return <components.SingleValue {...props} />;\n  };\n\n  return (\n    <div>\n      <div className=\"selected-options-container\">\n        {selectedOptions.map((option) => (\n          <div key={option.value} className=\"selected-option\">\n            {option.label}\n            <button\n              onClick={() => handleRemoveOption(option.value)}\n              className=\"remove-button\"\n            >\n              &times;\n            </button>\n          </div>\n        ))}\n      </div>\n      <Select\n        options={options}\n        value={selectedOptions}\n        onChange={handleChange}\n        onInputChange={handleInputChange}\n        isMulti\n        isClearable\n        components={{\n          SingleValue: SingleValue,\n        }}\n        hideSelectedOptions={true}\n        formatOptionLabel={({ label }) => label}\n        styles={{\n            // Hide the \"cross\" icon from the select input field\n            clearIndicator: (base) => ({\n              ...base,\n              display: 'none',\n            }),\n          }}\n      />\n    </div>\n  );\n};\n\nexport default FormChip;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}